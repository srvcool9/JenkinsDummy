package com.netlink.rsk.utility;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.UnsupportedEncodingException;
import java.security.KeyManagementException;
import java.security.NoSuchAlgorithmException;
import java.util.ArrayList;
import java.util.List;
import java.util.StringTokenizer;
import javax.net.ssl.SSLContext;
import org.apache.http.HttpResponse;
import org.apache.http.NameValuePair;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.conn.ssl.SSLSocketFactory;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.HttpClient;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.conn.scheme.Scheme;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.message.BasicNameValuePair;


public class MessageService {

    public static final String username="rskmp-cpi=";
    public static final String password="Cpirsk#1234";
    public static final String message="Helloooooo";
    public static final String senderId="RSKCPI";
    public static final String mobileNumber="9575455117";
    public static final String secureKey="f6f8142a-39a5-4ea9-81be-2b722fcd30aa";
    public static final Long templateId=Long.valueOf(1);

    /**
     * Send Single text SMS
     * @param username : Department Login User Name
     * @param password : Department Login Password
     * @param message : Message e.g. 'Welcome to mobile Seva'
     * @param senderId : Department allocated SenderID
     * @param mobileNumber : Single Mobile Number e.g. '99XXXXXXX'
     * @param secureKey : Department key generated by login to services portal
     * @param templateid : 12 to 19 digit id for each template content
     * @return {@link String} response from Mobile Seva Gateway e.g. '402,MsgID = 150620161466003974245msdgsms'
     * @see
     *
     */

    public String sendSingleSMS(String username, String password , String message , String senderId, String mobileNumber,String secureKey, String templateid){

        String responseString = "";
        SSLSocketFactory sf=null;
        SSLContext context=null;
        String encryptedPassword;
        try {
            context=SSLContext.getInstance("TLSv1.2"); // Use this line for Java version 7 and above
            context.init(null, null, null);
            sf=new SSLSocketFactory(context, SSLSocketFactory.STRICT_HOSTNAME_VERIFIER);
            Scheme scheme=new Scheme("https",443,sf);
            HttpClient client=new DefaultHttpClient();
            client.getConnectionManager().getSchemeRegistry().register(scheme);
            HttpPost post=new HttpPost("https://msdgweb.mgov.gov.in/esms/sendsmsrequestDLT");
            List<String> stringList = new ArrayList<>();
            stringList.add(password);
            encryptedPassword = MD5(stringList);
            List<String> stringList2 = new ArrayList<>();
            stringList2.add(username);
            stringList2.add(senderId);
            stringList2.add(message);
            stringList2.add(secureKey);
            String genratedhashKey = MD5(stringList2);
            List nameValuePairs=new ArrayList(1);
            nameValuePairs.add(new BasicNameValuePair("mobileno", mobileNumber));
            nameValuePairs.add(new BasicNameValuePair("senderid", senderId));
            nameValuePairs.add(new BasicNameValuePair("content", message));
            nameValuePairs.add(new BasicNameValuePair("smsservicetype", "singlemsg"));
            nameValuePairs.add(new BasicNameValuePair("username", username));
            nameValuePairs.add(new BasicNameValuePair("password", encryptedPassword));
            nameValuePairs.add(new BasicNameValuePair("key", genratedhashKey));
            //nameValuePairs.add(new BasicNameValuePair("templateid", templateid));
            post.setEntity(new UrlEncodedFormEntity(nameValuePairs));
            HttpResponse response=client.execute(post);
            BufferedReader bf=new BufferedReader(new InputStreamReader(response.getEntity().getContent()));
            String line="";
            while((line=bf.readLine())!=null){
                responseString = responseString+line;
            }
            System.out.println(responseString);
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        } catch (KeyManagementException e) {
            e.printStackTrace();
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        } catch (ClientProtocolException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return responseString;
    }

    public String MD5(List<String> md5) {
        try {
            String result= new String();
            for(String s :md5){
                java.security.MessageDigest md = java.security.MessageDigest.getInstance("MD5");
                byte[] array = md.digest(s.getBytes());
                StringBuffer sb = new StringBuffer();
                for (int i = 0; i < array.length; ++i) {
                    sb.append(Integer.toHexString((array[i] & 0xFF) | 0x100).substring(1,3));
                }
                result.concat(sb.toString());
            }
            return result;
        } catch (java.security.NoSuchAlgorithmException e) {
        }
        return null;
    }
}
